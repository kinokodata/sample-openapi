openapi: 3.0.0
info:
  title: シンプルなユーザー管理API
  description: ユーザー情報を管理するためのシンプルなAPI
  version: 1.0.0

servers:
  - url: http://localhost:23000
    description: 開発用サーバー

paths:
  /:
    get:
      summary: ウェルカムメッセージの取得
      description: APIのウェルカムメッセージを返します
      responses:
        '200':
          description: 正常にメッセージを取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WelcomeResponse'

  /users:
    get:
      summary: ユーザー一覧の取得
      description: 登録されている全ユーザーの一覧を返します
      responses:
        '200':
          description: 正常にユーザー一覧を取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'

    post:
      summary: 新規ユーザーの作成
      description: 新しいユーザーを登録します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: ユーザーの作成が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedResponse'
        '400':
          description: 不正なリクエストデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: 特定のユーザーの取得
      description: 指定されたIDのユーザー情報を取得します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ユーザーID
      responses:
        '200':
          description: ユーザーの取得が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 指定されたユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /product-categories:
    get:
      summary: 商品カテゴリ一覧の取得
      description: 登録されている全商品カテゴリの一覧を返します
      responses:
        '200':
          description: 正常に商品カテゴリ一覧を取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoriesResponse'

    post:
      summary: 新規商品カテゴリの作成
      description: 新しい商品カテゴリを登録します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryCreateRequest'
      responses:
        '201':
          description: 商品カテゴリの作成が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryCreatedResponse'
        '400':
          description: 不正なリクエストデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /product-categories/{id}:
    get:
      summary: 特定の商品カテゴリの取得
      description: 指定されたIDの商品カテゴリ情報を取得します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 商品カテゴリID
      responses:
        '200':
          description: 商品カテゴリの取得が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryResponse'
        '404':
          description: 指定された商品カテゴリが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: 商品カテゴリの更新
      description: 商品カテゴリの情報を更新します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 更新する商品カテゴリのID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryUpdateRequest'
      responses:
        '200':
          description: 商品カテゴリの更新が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryUpdatedResponse'
        '400':
          description: 不正なリクエストデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 指定された商品カテゴリが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: 商品カテゴリの削除
      description: 商品カテゴリを削除します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 商品カテゴリID
      responses:
        '200':
          description: 商品カテゴリの削除が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDeletedResponse'
        '404':
          description: 指定された商品カテゴリが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      summary: 商品一覧の取得
      description: 登録されている全商品の一覧を返します
      responses:
        '200':
          description: 正常に商品一覧を取得
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'

    post:
      summary: 新規商品の作成
      description: 新しい商品を登録します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: 商品の作成が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreatedResponse'
        '400':
          description: 不正なリクエストデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: 特定の商品の取得
      description: 指定されたIDの商品情報を取得します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 商品ID
      responses:
        '200':
          description: 商品の取得が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 指定された商品が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: 商品の更新
      description: 商品の情報を更新します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 更新する商品のID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
      responses:
        '200':
          description: 商品の更新が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdatedResponse'
        '400':
          description: 不正なリクエストデータ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 指定された商品が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: 商品の削除
      description: 商品を削除します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: 商品ID
      responses:
        '200':
          description: 商品の削除が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDeletedResponse'
        '404':
          description: 指定された商品が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sales:
    get:
      summary: 売上データの取得
      description: 期間を指定して売上データを取得します
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date
          description: 取得開始日 (YYYY-MM-DD)
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date
          description: 取得終了日 (YYYY-MM-DD)
        - name: category_id
          in: query
          required: false
          schema:
            type: integer
          description: 商品カテゴリID（指定しない場合は全カテゴリー）
        - name: groupBy
          in: query
          required: true
          schema:
            type: string
            enum: [ day, week ]
          description: 集計単位（日次/週次）
        - name: aggregationType
          in: query
          required: true
          schema:
            type: string
            enum: [ sum, average ]
          description: 集計方法（合計値/平均値）
      responses:
        '200':
          description: 売上データの取得が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesResponse'

  /weather:
    get:
      summary: 気象データの取得
      description: 期間を指定して気象データを取得します
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date
          description: 取得開始日 (YYYY-MM-DD)
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date
          description: 取得終了日 (YYYY-MM-DD)
        - name: groupBy
          in: query
          required: true
          schema:
            type: string
            enum: [ day, week ]
          description: 集計単位（日次/週次）
      responses:
        '200':
          description: 気象データの取得が成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherResponse'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: ユーザーID
        name:
          type: string
          description: ユーザーの名前

    ProductCategory:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: 商品カテゴリID
        name:
          type: string
          description: 商品カテゴリの名前
        description:
          type: string
          description: 商品カテゴリの説明

    Product:
      type: object
      required:
        - id
        - name
        - category
        - basePrice
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: 商品のID
        name:
          type: string
          description: 商品名
        category:
          $ref: '#/components/schemas/ProductCategory'
        basePrice:
          type: integer
          description: 基本価格
        createdAt:
          type: string
          format: date-time
          description: 作成日時

    SalesAggregate:
      type: object
      required:
        - date
        - quantity
        - totalAmount
        - categoryId
        - categoryName
      properties:
        date:
          type: string
          format: date
          description: 売上日（週次の場合は週の開始日）
        quantity:
          type: integer
          description: 販売数量（集計方法により合計または平均）
        totalAmount:
          type: integer
          description: 売上金額（集計方法により合計または平均）
        categoryId:
          type: integer
          description: カテゴリID（カテゴリ指定時のみ）
        categoryName:
          type: string
          description: カテゴリ名（カテゴリ指定時のみ）

    WeatherAggregate:
      type: object
      required:
        - date
        - weatherConditions
        - averageMaxTemperature
      properties:
        date:
          type: string
          format: date
          description: 日付（週次の場合は週の開始日）
        weatherConditions:
          type: array
          items:
            type: string
            enum: [ 晴れ, 曇り, 雨 ]
          description: 期間中の天候一覧
        averageMaxTemperature:
          type: number
          format: float
          description: 最高気温（週次の場合は平均値）

    UserCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 登録するユーザーの名前

    ProductCategoryCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 登録する商品カテゴリの名前
        description:
          type: string
          description: 登録する商品カテゴリの説明

    ProductCategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: 更新データ（商品カテゴリの名前）
        description:
          type: string
          description: 更新データ（商品カテゴリの説明）

    ProductCreateRequest:
      type: object
      required:
        - name
        - categoryId
        - basePrice
      properties:
        name:
          type: string
          description: 登録する商品の名前
        categoryId:
          type: integer
          format: int64
          description: 商品カテゴリのID
        basePrice:
          type: integer
          description: 商品の基本価格

    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: 更新データ（商品の名前）
        categoryId:
          type: integer
          format: int64
          description: 更新データ（商品カテゴリのID）
        basePrice:
          type: integer
          description: 更新データ（商品の基本価格）

    WelcomeResponse:
      type: object
      properties:
        message:
          type: string
          example: "Hello, Node.js!"

    UsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'

    UserCreatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "ユーザーの作成が完了しました"
        data:
          $ref: '#/components/schemas/User'

    ProductCategoriesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'

    ProductCategoryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductCategory'

    ProductCategoryCreatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品カテゴリの作成が完了しました"
        data:
          $ref: '#/components/schemas/ProductCategory'

    ProductCategoryUpdatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品カテゴリの更新が完了しました"
        data:
          $ref: '#/components/schemas/ProductCategory'

    ProductCategoryDeletedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品カテゴリの削除が完了しました"
        data:
          $ref: '#/components/schemas/ProductCategory'

    ProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    ProductResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Product'

    ProductCreatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品の作成が完了しました"
        data:
          $ref: '#/components/schemas/Product'

    ProductUpdatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品の更新が完了しました"
        data:
          $ref: '#/components/schemas/Product'

    ProductDeletedResponse:
      type: object
      properties:
        message:
          type: string
          example: "商品の削除が完了しました"
        data:
          $ref: '#/components/schemas/Product'

    SalesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SalesAggregate'

    WeatherResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WeatherAggregate'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: エラーメッセージ